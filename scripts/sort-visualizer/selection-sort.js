const MIN_ITEM_COLOR = SECOND_ITEM_COLOR;
const SORTED_ITEM_COLOR = DONE_ITEM_COLOR;

async function selectionSort(arr = []) {
	let n = arr.length,
		nSwap = 0,
		nCompare = 0,
		nArrAccess = 0;

	for (let i = 0; i < n - 1; ++i) {
		++nArrAccess;
		let min = arr[i];
		let index = i;
		await changeItemColor(i, MIN_ITEM_COLOR);

		// find min
		for (let j = i + 1; j < n; ++j) {
			if (!isSorting) return { nCompare, nArrAccess, nSwap };
			++nArrAccess;
			++nCompare;
			await changeItemColor(j, CURRENT_ITEM_COLOR);
			if (arr[j] < min) {
				await changeItemColor(j, MIN_ITEM_COLOR);
				await changeItemColor(index, ITEM_COLOR);
				min = arr[j];
				index = j;
			} else {
				await changeItemColor(j, ITEM_COLOR);
			}
		}

		// swap if min != initial min
		if (index !== i) {
			nArrAccess += 2;
			++nSwap;
			[arr[i], arr[index]] = [arr[index], arr[i]];
			await swapEle(i, index);
		}

		await changeItemColor(i, SORTED_ITEM_COLOR);
	}

	return { nCompare, nArrAccess, nSwap };
}

// description
const selectionSortCode = Prism.highlight(
	`function selectionSort(arr = []) {
	const n = arr.length;

	for (let i = 0; i < n - 1; ++i) {
		let min = arr[i];
		let index = i;

		// t√¨m min
		for (let j = i + 1; j < n; ++j) {
			if (arr[j] < min) {
				min = arr[j];
				index = j;
			}
		}

		// Ho√°n v·ªã n·∫øu min t√¨m th·∫•y # min ban ƒë·∫ßu
		if (index !== i) [arr[i], arr[index]] = [arr[index], arr[i]];
	}
}`,
	Prism.languages.javascript,
	'javascript',
);

const selectionSortDesc = {
	title: 'üîé SELECTION SORT ALGORITHM ‚úî',
	sortNotes: [
		{
			title: 'P.t·ª≠ hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ nh·ªè nh·∫•t',
			color: SECOND_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ ƒë√£ ch·ªçn',
			color: DONE_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">
		Best case: <b>O(n<sup>2</sup>)</b>
		<br />
		Average case: <b>O(n<sup>2</sup>)</b>
		<br />
		Worst case: <b>O(n<sup>2</sup>)</b>
		<br />
	</div>

	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O(1)</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
	<u>- ƒê·∫ßu v√†o:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- <b>arr</b>: m·∫£ng c·∫ßn s·∫Øp x·∫øp. <br />
		- <b>n</b>: s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng. <br />
		- <b>i</b>: ch·ªâ s·ªë index v√≤ng l·∫∑p ngo√†i (0 -> n-1). <br />
		- <b>j</b>: ch·ªâ s·ªë v√≤ng l·∫∑p trong (i+1 -> n) <br />
	</div>
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- S·ª≠ d·ª•ng 2 v√≤ng l·∫∑p l·ªìng nhau ƒë·ªÉ chia m·∫£ng th√†nh 2 m·∫£ng con (1 ƒë√£
		s·∫Øp x·∫øp, 1 kh√¥ng). <br />
		- V√≤ng l·∫∑p b√™n ngo√†i ƒë·ªÉ duy·ªát qua m·∫£ng. <br />
		- V√≤ng l·∫∑p b√™n trong duy·ªát qua m·∫£ng con ch∆∞a s·∫Øp x·∫øp ƒë·ªÉ t√¨m ph·∫ßn
		t·ª≠ min (max). <br />
		- N·∫øu min (max) trong m·∫£ng con ƒë√≥ nh·ªè (l·ªõn) h∆°n ph·∫ßn t·ª≠ cu·ªëi m·∫£ng
		ƒë√£ s·∫Øp x·∫øp th√¨ swap 2 ph·∫ßn t·ª´ ƒë√≥.
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class="m-t-8">
	<pre class="language-js"><code>${selectionSortCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
	- Kh√¥ng n√™n d√πng cho m·∫£ng k√≠ch th∆∞·ªõc l·ªõn. <br />
	- Ch·ªâ n√™n s·ª≠ d·ª•ng khi m·∫£ng g·∫ßn nh∆∞ ƒë√£ s·∫Øp x·∫øp nh∆∞ b·∫£ng Highscore
	list...
</div>`,
};
