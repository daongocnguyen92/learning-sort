const PIVOT_COLOR = DONE_ITEM_COLOR;
let nQSCompare = 0,
	nQSArrAccess = 0,
	nQSSwap = 0;

async function partitionFunc(arr = [], low, high) {
	await changeItemColor(high, PIVOT_COLOR);
	let pivot = arr[high];
	let l = low;
	let r = high - 1;

	while (true) {
		while (l <= r && arr[l] < pivot) {
			l++;
			++nQSArrAccess;
			nQSCompare += 2;
		}
		while (r >= l && arr[r] > pivot) {
			r--;
			++nQSArrAccess;
			nQSCompare += 2;
		}
		if (l >= r) break;
		await preSwap(l, r);
		[arr[l], arr[r]] = [arr[r], arr[l]];
		++nQSCompare;
		nQSArrAccess += 2;
		nQSSwap++;
		await swapEle(l, r);
		await endSwap(l, r);
		l++;
		r--;
	}

	await preSwap(l, high);
	[arr[l], arr[high]] = [arr[high], arr[l]];
	await swapEle(l, high);
	await endSwap(l, high);

	await changeItemColor(l, PIVOT_COLOR);
	return l;
}

async function quickSort(arr, low, high) {
	if (low < high) {
		if (!isSorting) return { nQSSwap, nQSCompare, nQSArrAccess };
		const pivot = await partitionFunc(arr, low, high);
		await changeItemColor(pivot, ITEM_COLOR);
		await quickSort(arr, low, pivot - 1);
		await quickSort(arr, pivot + 1, high);
	}
	return { nSwap: nQSSwap, nCompare: nQSCompare, nArrAccess: nQSArrAccess };
}

// description
const qSPivotCode = Prism.highlight(
	`function partitionFunc(arr = [], low, high) {
	let pivot = arr[high];
	let l = low;
	let r = high - 1;

	while (true) {
		// T√¨m ph·∫ßn t·ª≠ b√™n tr√°i b·ªã sai v·ªã tr√≠
		while (l <= r && arr[l] < pivot) l++;

		// T√¨m ph·∫ßn t·ª≠ b√™n ph·∫£i b·ªã sai v·ªã tr√≠
		while (r >= l && arr[r] > pivot) r--;

		// N·∫øu ƒë√£ ho√†n t·∫•t duy·ªát th√¨ d·ª´ng
		if (l >= r) break;

		// Ng∆∞·ª£c l·∫°i th√¨ swap 2 ph·∫ßn t·ª≠ b·ªã sai, sau ƒë√≥ tƒÉng tr√°i v√† ph·∫£i l√™n 1
		[arr[l], arr[r]] = [arr[r], arr[l]];
		l++;
		r--;
	}

	// ƒê∆∞a ph·∫ßn t·ª≠ pivot v√†o ƒë√∫ng v·ªã tr√≠
	[arr[l], arr[high]] = [arr[high], arr[l]];

	// Tr·∫£ v·ªÅ v·ªã tr√≠ pivot hi·ªán t·∫°i
	return l;
}`,
	Prism.languages.javascript,
	'javascript',
);
const qSCode = Prism.highlight(
	`function quickSort(arr, low, high) {
	if (low < high) {
		// T√¨m ph·∫ßn t·ª≠ pivot
		const pivot = partitionFunc(arr, low, high);

		// ƒê·ªá quy n·ª≠a m·∫£ng b√™n tr√°i
		quickSort(arr, low, pivot - 1);

		// ƒê·ªá quy n·ª≠a m·∫£ng b√™n ph·∫£i
		quickSort(arr, pivot + 1, high);
	}
}`,
	Prism.languages.javascript,
	'javascript',
);
const quickSortDesc = {
	title: '‚ö° QUICK SORT ALGORITHM üê¢',
	sortNotes: [
		{
			title: 'P.t·ª≠ tr√°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ ph·∫£i',
			color: SECOND_ITEM_COLOR,
		},
		{
			title: 'Pivot',
			color: DONE_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">
		Best case: <b>O( n log(n) )</b>
		<br />
		Average case: <b>O( n log(n) )</b>
		<br />
		Worst case (m·∫£ng ƒë√£ s·∫Øp x·∫øp hay pivot ph·∫ßn t·ª≠ l·ªõn nh·∫•t (nh·ªè nh·∫•t) c·ªßa m·∫£ng): <b>O(n<sup>2</sup>)</b>
		<br />
	</div>

	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O( log(n) )</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
	<u>- ƒê·∫ßu v√†o:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- <b>arr</b>: m·∫£ng c·∫ßn s·∫Øp x·∫øp. <br />
		- <b>n</b>: s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng. <br />
		- <b>low</b>: index ph·∫ßn t·ª≠ b·∫Øt ƒë·∫ßu duy·ªát. <br />
		- <b>high</b>: index ph·∫ßn t·ª≠ cu·ªëi c√πng c·∫ßn duy·ªát. <br />
	</div>
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
	- L·ª±a ch·ªçn m·ªôt ph·∫ßn t·ª≠ v√°ch ngƒÉn (pivot).<br/>
	- X√¢y d·ª±ng m·ªôt h√†m v·ªõi nhi·ªám v·ª• chia m·∫£ng th√†nh 2 m·∫£ng con sao cho: <br/>
	&nbsp;	+ M·∫£ng b√™n tr√°i bao g·ªìm c√°c ph·∫ßn t·ª≠ nh·ªè h∆°n pivot. <br/> 
	&nbsp;	+ M·∫£ng b√™n ph·∫£i bao g·ªìm c√°c ph·∫ßn t·ª≠ l·ªõn h∆°n pivot. <br/> 
	- L·∫∑p l·∫°i 2 b∆∞·ªõc tr√™n v·ªõi n·ª≠a m·∫£ng b√™n tr√°i v√† n·ª≠a m·∫£ng b√™n ph·∫£i.<br/>
	- K·∫øt th√∫c khi m·∫£ng ch·ªâ c√≤n 1 ph·∫ßn t·ª≠ (kh√¥ng th·ªÉ chia m·∫£ng ra n·ªØa).<br/>
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class="sub-content m-t-8 m-b-8">
	<h3 class="m-l-16">3.1 - H√†m t√¨m v√°ch ngƒÉn pivot (partition function):</h3>
	<pre class="language-js"><code>${qSPivotCode}</code></pre>
	<h3 class="m-l-16 m-t-16 m-b-8">3.2 - H√†m quick sort:</h3>
	<pre class="language-js"><code>${qSCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
	- N√™n d√πng cho m·∫£ng k√≠ch th∆∞·ªõc l·ªõn. <br />
	- Kh√¥ng n√™n d√πng khi m·∫£ng ƒë√£ s·∫Øp x·∫øp.. <br/>
	- <b>Nh∆∞·ª£c ƒëi·ªÉm:</b><br/>
	  &nbsp;	+ Thu·∫≠t to√°n b·ªã ch·∫≠m khi ch·ªçn pivot kh√¥ng t·ªët (nh√¢n ph·∫©m k√©m üòÇüôÇ). <br />
		&nbsp;	+ T·ªët th√™m b·ªô nh·ªõ ƒë·ªÉ l∆∞u tr·ªØ ƒë·ªá quy. <br/>
	- ∆Øu ƒëi·ªÉm:</br> N·∫øu pivot l√† ph·∫ßn t·ª≠ g·∫ßn trung b√¨nh c·ªông c·ªßa c√°c ph·∫ßn t·ª≠ m·∫£ng th√¨ thu·∫≠t to√°n ch·∫°y r·∫•t nhanh. <br/>S
</div>`,
};
