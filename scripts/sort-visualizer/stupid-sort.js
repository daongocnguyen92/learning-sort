let nStCompare = 0,
	nStArrAccess = 0,
	nStSwap = 0;

async function isSortedArr(arr = []) {
	let n = arr.length;

	for (let i = 0; i < n - 1; ++i) {
		if (!isSorting) return false;
		nStCompare += 2;
		nStArrAccess += 2;

		await changeItemColor(i, CURRENT_ITEM_COLOR);
		await changeItemColor(i, ITEM_COLOR);

		if (arr[i] > arr[i + 1]) {
			return false;
		}
	}

	return true;
}

function shuffleArray(arr = []) {
	return arr.sort(() => {
		nStArrAccess += 2;
		nStSwap += 2;
		return Math.random() - 0.5;
	});
}

async function reRenderArr(arr) {
	let xml = '';

	arr.forEach((item, index) => {
		xml += `<li class="arr-item" style="height:${item}px"></li>`;
	});

	$('#graph').html(xml);
}

async function stupidSort(arr = []) {
	while (!(await isSortedArr(arr))) {
		nStCompare++;

		if (!isSorting)
			return { nSwap: nStSwap, nCompare: nStCompare, nArrAccess: nStArrAccess };

		shuffleArray(arr);
		await reRenderArr(arr);
	}

	return { nSwap: nStSwap, nCompare: nStCompare, nArrAccess: nStArrAccess };
}

// description
const stSCode = Prism.highlight(
	`// H√†m ki·ªÉm tra m·∫£ng ƒë√£ s·∫Øp x·∫øp ch∆∞a?
function isSortedArr(arr = []) {
	for (let i = 0; i < arr.length - 1; ++i)
		if (arr[i] > arr[i + 1]) return false;

	return true;
}

// H√†m x√°o tr·ªôn m·∫£ng
function shuffleArray(arr = []) {
	return arr.sort(() => Math.random() - 0.5);
}

// stupid sort
function stupidSort(arr = []) {
	while (!isSortedArr(arr)) shuffleArray(arr);
}
`,
	Prism.languages.javascript,
	'javascript',
);

const stupidSortDesc = {
	title: 'üçÄ STUPID SORT ALGORITHM üê¢',
	sortNotes: [
		{
			title: 'P.t·ª≠ ki·ªÉm tra hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<div class="sub-content p-tb-8">
	- O(‚àû) hay O(nh√¢n ph·∫©m)
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<div class="sub-content">
	<div class="p-l-8 m-tb-8">
	- X√°o tr·ªôn m·∫£ng, ki·ªÉm tra m·∫£ng v·ª´a x√°o.<br/>
	- N·∫øu ƒë√£ x·∫øp th√¨ d·ª´ng, c√≤n kh√¥ng th√¨ l·∫∑p l·∫°i üôÇ.<br/>
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class="sub-content m-t-8 m-b-8">
	<h3 class="m-l-16 m-t-16 m-b-8">3.2 - H√†m stupid sort:</h3>
	<pre class="language-js"><code>${stSCode}</code></pre>

</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
	- D√πng ƒë·ªÉ ki·ªÉm tra nh√¢n ph·∫©m ng∆∞·ªùi d√πng. üê≠<br />
	- Ch√°n qu√° th√¨ d√πng cho vui ch·ª© kh√¥ng c√≥ √Ω nghƒ©a g√¨. üòú<br/>
</div>`,
};
