async function oddEvenSort(arr = []) {
	const n = arr.length;
	let nSwap = 0,
		nCompare = 0,
		nArrAccess = 0,
		isSorted = false;

	while (!isSorted) {
		isSorted = true;
		if (!isSorting) return { nSwap, nArrAccess, nCompare };

		// S·∫Øp x·∫øp m·∫£ng ch·∫µn
		for (let i = 0; i <= n - 2; i += 2) {
			if (!isSorting) return { nSwap, nArrAccess, nCompare };

			nArrAccess += 2;
			nCompare++;

			if (arr[i] > arr[i + 1]) {
				await preSwap(i, i + 1);
				[arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
				isSorted = false;
				await swapEle(i, i + 1);

				nSwap++;
				nArrAccess += 2;
				await endSwap(i, i + 1);
			}
		}

		// S·∫Øp x·∫øp m·∫£ng l·∫ª
		for (let i = 1; i <= n - 2; i += 2) {
			if (!isSorting) return { nSwap, nArrAccess, nCompare };

			nArrAccess += 2;
			nCompare++;
			if (arr[i] > arr[i + 1]) {
				await preSwap(i, i + 1);

				[arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
				isSorted = false;
				await swapEle(i, i + 1);

				nSwap++;
				nArrAccess += 2;
				await endSwap(i, i + 1);
			}
		}
	}

	return { nSwap, nArrAccess, nCompare };
}

// description
const oeSortCode = Prism.highlight(
	`function oddEvenSort(arr = []) {
  const n = arr.length;
  let isSorted = false;

  while (!isSorted) {
    isSorted = true;

    // S·∫Øp x·∫øp m·∫£ng ch·∫µn
    for (let i = 0; i <= n - 2; i += 2) {
      if (arr[i] > arr[i + 1]) {
        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
        isSorted = false;
      }
    }

    // S·∫Øp x·∫øp m·∫£ng l·∫ª
    for (let i = 1; i <= n - 2; i += 2) {
      if (arr[i] > arr[i + 1]) {
        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
        isSorted = false;
      }
    }
  }

  return arr;
}
  `,
	Prism.languages.javascript,
	'javascript',
);

const oeSortDesc = {
	title: '0Ô∏è‚É£1Ô∏è‚É£ ODD EVEN SORT / BRICK SORT üß±',
	sortNotes: [
		{
			title: 'P.t·ª≠ hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ k·∫ø ti·∫øp',
			color: SECOND_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">
		Best case: <b>O(n)</b>
		<br />
		Average case: <b>O(n<sup>2</sup>)</b>
		<br />
		Worst case: <b>O(n<sup>2</sup>)</b>
		<br />
	</div>

	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O(1)</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
  - L√† phi√™n b·∫£n kh√°c c·∫£i thi·ªán c·ªßa bubble sort, chia m·∫£ng l√†m 2 pha ch·∫µn v√† l·∫ª, sau ƒë√≥ d√πng bubble sort. <br/>
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class=" m-t-8">
		<pre class="language-js"><code>${oeSortCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
  - C√≤n g·ªçi l√† Brick sort. <br/>
	- Kh√¥ng n√™n d√πng cho m·∫£ng k√≠ch th∆∞·ªõc l·ªõn. <br />
	- Ch·ªâ n√™n s·ª≠ d·ª•ng khi m·∫£ng g·∫ßn nh∆∞ ƒë√£ s·∫Øp x·∫øp nh∆∞ b·∫£ng Highscore
	list...
	</div>`,
};
