async function basicBubbleSort(arr = []) {
	let n = arr.length,
		nSwap = 0,
		nCompare = 0,
		nArrAccess = 0;
	for (let i = 0; i < n - 1; ++i) {
		for (let j = 0; j < n - 1; ++j) {
			++nCompare;
			nArrAccess += 2;
			if (!isSorting) return;
			await preSwap(j, j + 1);
			if (arr[j] > arr[j + 1]) {
				[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
				nArrAccess += 2;
				await swapEle(j, j + 1);
				++nSwap;
			}
			await endSwap(j, j + 1);
		}
	}

	return { nCompare, nArrAccess, nSwap };
}

async function enhancedBubbleSort(arr = []) {
	let n = arr.length,
		nSwap = 0,
		nCompare = 0,
		nArrAccess = 0;
	for (let i = 0; i < n - 1; ++i) {
		let isSwap = false;
		for (let j = 0; j < n - 1 - i; ++j) {
			++nCompare;
			nArrAccess += 2;
			if (!isSorting) return { nCompare, nArrAccess, nSwap };
			await preSwap(j, j + 1);
			if (arr[j] > arr[j + 1]) {
				nArrAccess += 2;
				isSwap = true;
				[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
				await swapEle(j, j + 1);
				++nSwap;
			}
			await endSwap(j, j + 1);
		}
		await changeItemColor(n - 1 - i, DONE_ITEM_COLOR);
		if (!isSwap) {
			return { nCompare, nArrAccess, nSwap };
		}
	}

	return { nCompare, nArrAccess, nSwap };
}

// description
//  basic
const bsCode = Prism.highlight(
	`function basicBubbleSort(arr = []) {
	const n = arr.length;
	
	// V√≤ng l·∫∑p ngo√†i -> l·∫∑p qua m·∫£ng
	for (let i = 0; i < n - 1; ++i) {
		// V√≤ng l·∫∑p trong -> n·ªïi b·ªçt ph·∫ßn t·ª≠
		for (let j = 0; j < n - 1; ++j) {
			if (arr[j] > arr[j + 1]) {
				// Ho√°n v·ªã
				[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
			}
		}
	}
	
	return arr;
}`,
	Prism.languages.javascript,
	'javascript',
);

const basicBubbleSortDesc = {
	title: 'üéà BASIC BUBBLE SORT üí≠',
	sortNotes: [
		{
			title: 'P.t·ª≠ hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ k·∫ø ti·∫øp',
			color: SECOND_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">
		Best case: <b>O(n)</b>
		<br />
		Average case: <b>O(n<sup>2</sup>)</b>
		<br />
		Worst case: <b>O(n<sup>2</sup>)</b>
		<br />
	</div>

	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O(1)</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
	<u>- ƒê·∫ßu v√†o:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- <b>arr</b>: m·∫£ng c·∫ßn s·∫Øp x·∫øp. <br />
		- <b>n</b>: s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng. <br />
		- <b>i</b>: ch·ªâ s·ªë index v√≤ng l·∫∑p ngo√†i (0 -> n-1). <br />
		- <b>j</b>: ch·ªâ s·ªë v√≤ng l·∫∑p trong (0 -> n - 1) <br />
	</div>
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- S·ª≠ d·ª•ng 2 v√≤ng l·∫∑p l·ªìng nhau. <br />
		- V√≤ng l·∫∑p b√™n ngo√†i ƒë·ªÉ duy·ªát qua m·∫£ng. <br />
		- V√≤ng l·∫∑p b√™n trong ƒë·ªÉ ƒë·∫©y ph·∫ßn t·ª≠ max (min) l√™n ƒë·∫ßu m·∫£ng
		(bubble). <br />
		- N·∫øu ph·∫ßn t·ª≠ sau > ph·∫ßn t·ª≠ tr∆∞·ªõc th√¨ swap 2 ph·∫ßn t·ª≠ ƒë√≥ (s·∫Øp tƒÉng
		d·∫ßn) v√† ng∆∞·ª£c l·∫°i.
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class=" m-t-8">
		<pre class="language-js"><code>${bsCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
	- Kh√¥ng n√™n d√πng cho m·∫£ng k√≠ch th∆∞·ªõc l·ªõn. <br />
	- Ch·ªâ n√™n s·ª≠ d·ª•ng khi m·∫£ng g·∫ßn nh∆∞ ƒë√£ s·∫Øp x·∫øp nh∆∞ b·∫£ng Highscore
	list...
	</div>`,
};

// enhanced
const ebsCode = Prism.highlight(
	`function enhancedBubbleSort(arr = []) {
	const n = arr.length;

	// V√≤ng l·∫∑p ngo√†i -> l·∫∑p qua m·∫£ng
	for (let i = 0; i < n - 1; ++i) {
		let swapped = false;

		// V√≤ng l·∫∑p trong -> n·ªïi b·ªçt ph·∫ßn t·ª≠
		// M·ªói l·∫ßn l·∫∑p tr·ª´ ƒëi 1 l√† ph·∫ßn t·ª≠ ƒë√£ n·ªïi b·ªçt tr∆∞·ªõc ƒë√≥
		for (let j = 0; j < n - 1 - i; ++j) {
			if (arr[j] > arr[j + 1]) {
				// Ho√°n v·ªã
				[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
				swapped = true; // ƒê·ªïi c·ªù swap
			}
		}

		// N·∫øu v√≤ng l·∫∑p trong kh√¥ng c√≥ c·∫∑p n√†o swap th√¨ d·ª´ng (ƒë√£ x·∫øp xong)
		if (!swapped) break;
	}

	return arr;
}`,
	Prism.languages.javascript,
	'javascript',
);
const enhancedBubbleSortDesc = {
	title: 'üí≠ ENHANCED BUBBLE SORT üéà',
	sortNotes: [
		{
			title: 'P.t·ª≠ hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ k·∫ø ti·∫øp',
			color: SECOND_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ n·ªïi b·ªçt',
			color: DONE_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">
		Best case: <b>O(n)</b>
		<br />
		Average case: <b>O(n<sup>2</sup>)</b>
		<br />
		Worst case: <b>O(n<sup>2</sup>)</b>
		<br />
	</div>

	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O(1)</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
	<u>- ƒê·∫ßu v√†o:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- <b>arr</b>: m·∫£ng c·∫ßn s·∫Øp x·∫øp. <br />
		- <b>n</b>: s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng. <br />
		- <b>i</b>: ch·ªâ s·ªë index v√≤ng l·∫∑p ngo√†i (0 -> n-1). <br />
		- <b>j</b>: ch·ªâ s·ªë v√≤ng l·∫∑p trong (0 -> n - 1 - i) <br />
	</div>
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- S·ª≠ d·ª•ng 2 v√≤ng l·∫∑p l·ªìng nhau. <br />
		- V√≤ng l·∫∑p b√™n ngo√†i ƒë·ªÉ duy·ªát qua m·∫£ng. <br />
		- V√≤ng l·∫∑p b√™n trong ƒë·ªÉ ƒë·∫©y ph·∫ßn t·ª≠ max (min) l√™n ƒë·∫ßu m·∫£ng
		(bubble). <br />
		- N·∫øu ph·∫ßn t·ª≠ sau > ph·∫ßn t·ª≠ tr∆∞·ªõc th√¨ swap 2 ph·∫ßn t·ª≠ ƒë√≥ (s·∫Øp tƒÉng
		d·∫ßn) v√† ng∆∞·ª£c l·∫°i.
		- ƒê·ªÉ t·ªëi ∆∞u th√¨ ta ch·ªâ n√™n cho v√≤ng l·∫∑p trong ch·∫°y ƒë·∫øn (n - 1 - i) m√† kh√¥ng c·∫ßn ƒë·∫øn (n - 1).
		- Ki·ªÉm tra n·∫øu trong su·ªët v√≤ng l·∫∑p b√™n trong kh√¥ng c√≥ c·∫∑p n√†o ƒë∆∞·ª£c swap th√¨ d·ª´ng thu·∫≠t to√°n.
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div m-t-8">
	<pre class="language-js"><code>${ebsCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
	- Kh√¥ng n√™n d√πng cho m·∫£ng k√≠ch th∆∞·ªõc l·ªõn. <br />
	- Ch·ªâ n√™n s·ª≠ d·ª•ng khi m·∫£ng g·∫ßn nh∆∞ ƒë√£ s·∫Øp x·∫øp nh∆∞ b·∫£ng Highscore
	list...
	- N√™n d√πng thay th·∫ø cho thu·∫≠t to√°n basic bubble sort.
	</div>`,
};
