// H√†m l·∫•y ch·ªØ s·ªë t·∫°i v·ªã tr√≠ posDigit
// posDigit = 0 l√† h√†ng ƒë∆°n v·ªã
function getDigit(num = 0, posDigit = 0) {
	// ex: num = -1234, posDigit = 2, expected = 2
	let numInt = Math.abs(parseInt(num / 10 ** posDigit)); // numInt = | -1234 / 10^2 | = 12;
	let digit = numInt % 10; // digit = 2;

	// N·∫øu num < 0 v√† digit = 0 th√¨ tr·∫£ v·ªÅ -1, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ digit
	return num < 0 && digit === 0 ? -1 : digit;
}

// T√¨m s·ªë ch·ªØ s·ªë l·ªõn nh·∫•t c·ªßa m·∫£ng
// Ch√∫ √Ω s·ªë √¢m th√¨ c·ªông th√™m 1 ch·ªØ s·ªë
function getMaxExp(arr = []) {
	let exp = 0;

	arr.forEach((num) => {
		const len = num.toString().length;
		if (len > exp) exp = len;
	});

	return exp;
}

// H√†m radix sort LSD ( Least Significant Digit )
async function radixSortLSD(arr = []) {
	let nSwap = 0,
		nCompare = 0,
		nArrAccess = 0;

	// T·∫°o 11 c√°i x√¥ ch·ª©a c√°c digit t·ª´ -1 ƒë·∫øn 9
	let buckets = Array.from({ length: 11 }, () => new Array());

	// S·ªë ch·ªØ s·ªë nhi·ªÅu nh·∫•t, c≈©ng l√† s·ªë l·∫ßn l·∫∑p duy·ªát m·∫£ng
	let exp = getMaxExp(arr) || 0;
	nArrAccess += arr.length;

	// LSD l·∫•y t·ª´ ch·ªØ s·ªë cu·ªëi
	let i = 0;
	while (i < exp) {
		if (!isSorting) return { nSwap, nCompare, nArrAccess };

		// L·∫∑p qua m·∫£ng v√† cho v√†o c√°c x√¥
		const arrLen = arr.length;
		for (let index = 0; index < arrLen; ++index) {
			if (!isSorting) return { nSwap, nCompare, nArrAccess };

			const num = arr[index];
			await changeItemColor(index, CURRENT_ITEM_COLOR);
			const digitIndex = getDigit(num, i) + 1;
			buckets[digitIndex].push(num);
			await changeItemColor(index, ITEM_COLOR);

			nArrAccess += 3;
		}

		// L·∫•y t·ª´ x√¥ tr·∫£ v·ªÅ m·∫£ng
		let j = 0;
		for (let index = 0; index < 11; ++index) {
			if (!isSorting) return { nSwap, nCompare, nArrAccess };

			let numArr = buckets[index];
			nArrAccess++;

			// N·∫øu l√† l·∫ßn cu·ªëi v√† x√¥ l√† x√¥ ch·ª©a s·ªë √¢m th√¨ l·∫•y ng∆∞·ª£c l·∫°i c√°c p.t·ª≠ trong x√¥
			if (i === exp - 1 && index === 0) {
				const n = numArr.length;
				for (let k = n - 1; k >= 0; --k) {
					await changeItemColor(j, SECOND_ITEM_COLOR);
					await changeValue(j, numArr[k]);
					await changeItemColor(j, ITEM_COLOR);
					arr[j++] = numArr[k];
					nArrAccess += 2;
				}
			}
			// Ng∆∞·ª£c l·∫°i, th√¨ l·∫•y xu√¥i t·ª´ trong x√¥
			else {
				const l = numArr.length;
				for (let index = 0; index < l; ++index) {
					if (!isSorting) return { nSwap, nCompare, nArrAccess };

					const num = numArr[index];
					await changeValue(j, num);
					await changeItemColor(j, SECOND_ITEM_COLOR);
					await changeItemColor(j, ITEM_COLOR);

					arr[j++] = num;
					nArrAccess += 2;
				}
			}
			// L√†m tr·ªëng x√¥
			numArr.length = 0;
		}

		++i;
	}

	return { nSwap, nCompare, nArrAccess };
}

// description
const radixSortLSDCode = Prism.highlight(
	`// H√†m l·∫•y ch·ªØ s·ªë t·∫°i v·ªã tr√≠ posDigit
// posDigit = 0 l√† h√†ng ƒë∆°n v·ªã
function getDigit(num = 0, posDigit = 0) {
  // ex: num = -1234, posDigit = 2, expected = 2
  let numInt = Math.abs(parseInt(num / 10 ** posDigit)); // numInt = | -1234 / 10^2 | = 12;
  let digit = numInt % 10; // digit = 2;

  // N·∫øu num < 0 v√† digit = 0 th√¨ tr·∫£ v·ªÅ -1, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ digit
  return num < 0 && digit === 0 ? -1 : digit;
}

// T√¨m s·ªë ch·ªØ s·ªë l·ªõn nh·∫•t c·ªßa m·∫£ng
// Ch√∫ √Ω s·ªë √¢m th√¨ c·ªông th√™m 1 ch·ªØ s·ªë
function getMaxExp(arr = []) {
  let exp = 0;

  arr.forEach((num) => {
    const len = num.toString().length;
    if (len > exp) exp = len;
  });

  return exp;
}

// H√†m radix sort LSD ( Least Significant Digit )
function radixSortLSD(arr = []) {
  // T·∫°o 11 c√°i x√¥ ch·ª©a c√°c digit t·ª´ -1 ƒë·∫øn 9
  let buckets = Array.from({ length: 11 }, () => new Array());

  // S·ªë ch·ªØ s·ªë nhi·ªÅu nh·∫•t, c≈©ng l√† s·ªë l·∫ßn l·∫∑p duy·ªát m·∫£ng
  let exp = getMaxExp(arr) || 0;

  // LSD l·∫•y t·ª´ ch·ªØ s·ªë cu·ªëi
  let i = 0;
  while (i < exp) {
    // L·∫∑p qua m·∫£ng v√† cho v√†o c√°c x√¥
    arr.forEach((num) => {
      const digitIndex = getDigit(num, i) + 1; // Do buckets c√≥ index t·ª´ 0 -> 10, getDigit() tr·∫£ v·ªÅ -1 -> 10
      buckets[digitIndex].push(num);
    });

    // L·∫•y t·ª´ x√¥ tr·∫£ v·ªÅ m·∫£ng
    let j = 0;
    buckets.forEach((numArr, index) => {
      // N·∫øu l√† l·∫ßn cu·ªëi v√† x√¥ l√† x√¥ ch·ª©a s·ªë √¢m th√¨ l·∫•y ng∆∞·ª£c l·∫°i c√°c p.t·ª≠ trong x√¥
      if (i === exp - 1 && index === 0) {
        const n = numArr.length;
        for (let k = n - 1; k >= 0; --k) arr[j++] = numArr[k];
      }
      // Ng∆∞·ª£c l·∫°i, th√¨ l·∫•y xu√¥i t·ª´ trong x√¥
      else numArr.forEach((num) => (arr[j++] = num));

      // L√†m tr·ªëng x√¥
      numArr.length = 0;
    });

    ++i;
  }

  return arr;
}
`,
	Prism.languages.javascript,
	'javascript',
);

const radixSortLSDDesc = {
	title: '1Ô∏è‚É£ RADIX SORT (LSD) ALGORITHM üíØ',
	sortNotes: [
		{
			title: 'P.t·ª≠ hi·ªán t·∫°i',
			color: CURRENT_ITEM_COLOR,
		},
		{
			title: 'P.t·ª≠ trong x√¥',
			color: SECOND_ITEM_COLOR,
		},
	],
	htmlContent: `<h2 class="sub-title">
	1) ƒê·ªô ph·ª©c t·∫°p thu·∫≠t to√°n (Algorithm Complexity BigO):
</h2>
<br />
<div class="sub-content">
	<u>- ƒê·ªô ph·ª©c t·∫°p th·ªùi gian (Time Complexity):</u>
	<br />
  <br />

  <p>
    Gi·∫£ s·ª≠ ta c√≥ 1 m·∫£ng c√°c s·ªë nguy√™n c√≥ s·ªë ph·∫ßn t·ª≠ n, base (s·ªë l∆∞·ª£ng x√¥ (bucket) ch·ª©a c√°c ph·∫ßn t·ª≠) 
    v√† digit l√† s·ªë ch·ªØ s·ªë c·ªßa s·ªë l·ªõn nh·∫•t trong m·∫£ng. Th√¨ ƒë·ªô ph·ª©c t·∫°p s·∫Ω l√†:
  </p>

	<div class="p-l-8 m-tb-8">
		Best case: <b>O( digit * (n + base) )</b>
		<br />
		Average case: <b>O( digit * (n + base) )</b>
		<br />
		Worst case: <b>O( digit * (n + base) )</b>
		<br />
	</div>
	<u>- ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ (Menory Complexity):</u>
	<br />
	<div class="p-l-8 m-tb-8">Worst case: <b>O( n + base )</b></div>
</div>
<h2 class="sub-title">2) √ù t∆∞·ªüng thu·∫≠t to√°n (Algorithm Idea):</h2>
<br />
<div class="sub-content">
  S·ªë l∆∞·ª£ng base (bucket) kh√°c nhau th√¨ c√°ch t√°ch ph·∫ßn t·ª≠ c≈©ng kh√°c nhau. <br/>
  V√≠ d·ª•, ta ch·ªçn base = 10 (c√°c x√¥ t·ª´ 0 ƒë·∫øn 9) th√¨ m·ªói l·∫ßn t√°ch s·∫Ω l√† 1 ch·ªØ s·ªë. C√≤n base = 100 th√¨ m·ªói l·∫ßn t√°ch s·∫Ω l√† 2 s·ªë.
</div>
<br />
<div class="sub-content">
	<u>- ƒê·∫ßu v√†o:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- <b>arr</b>: m·∫£ng c·∫ßn s·∫Øp x·∫øp. <br />
		- <b>n</b>: s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng. <br />
		- <b>buckets</b>: M·∫£ng 2 chi·ªÅu ch·ª©a c√°c s·ªë theo c∆° s·ªë c·ªßa n√≥. <br />
	</div>
	<u>- √ù t∆∞·ªüng:</u>
	<br />
	<div class="p-l-8 m-tb-8">
		- S·ª≠ d·ª•ng m·ªôt m·∫£ng 2 chi·ªÅu ƒë·ªÉ ch·ª©a c√°c s·ªë ƒë∆∞·ª£c ph√¢n lo·∫°i theo t·ª´ng ch·ªØ s·ªë c·ªßa ch√∫ng.<br />
		- S·ªë l·∫ßn l·∫∑p b√™n ngo√†i l√† s·ªë l∆∞·ª£ng ch·ªØ s·ªë c·ªßa ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong m·∫£ng. <br />
		- M·ªói l·∫ßn l·∫∑p ta s·∫Ω t√°ch c√°c ch·ªØ s·ªë theo t·ª´ng h√†ng. Radix LSD (Least Significant Digit) n√™n ta s·∫Ω b·∫Øt ƒë·∫ßu t·ª´ h√†ng ƒë∆°n v·ªã ƒë·∫øn h√†ng ch·ª•c ... <br />
    - M·ªói ch·ªØ s·ªë s·∫Ω v√†o 1 x√¥ t∆∞∆°ng ·ª©ng. <br/>
		- L·∫•y c√°c x√¥ theo th·ª© t·ª± tr√™n xu·ªëng g√°n ng∆∞·ª£c l·∫°i m·∫£ng ban ƒë·∫ßu. <br/>
    - Ti·∫øp t·ª•c nh∆∞ th·∫ø ƒë·∫øn h√†ng cu·ªëi c√πng.
	</div>
</div>
<h2 class="sub-title">3) Tri·ªÉn khai (Implement Algorithm):</h2>
<div class="sub-content m-t-8 m-b-8">
	<h3 class="m-l-16">3.1 - M√¥ t·∫£ √Ω t∆∞·ªüng:</h3>
  <img
		src="/assets/images/sort/radix-lsd.jpg"
		alt="Radix LSD sort illustration photo"
		width="100%"
		heigh="650px"
	/>
  <div class="t-center">
    Ngu·ªìn ·∫£nh: <a href="https://www.geeksforgeeks.org/radix-sort/">GeeksforGeek</a>
  </div>
  <br/>
	<h3 class="m-l-16 m-t-16 m-b-8">3.2 - H√†m Radix LSD sort:</h3>
	<pre class="language-js"><code>${radixSortLSDCode}</code></pre>
</div>
<h2 class="sub-title">4) Ghi ch√∫ (Note):</h2>
<div class="sub-content">
  - L√† m·ªôt thu·∫≠t to√°n s·∫Øp x·∫øp ph√¢n t√°n, ·ªïn ƒë·ªãnh, kh√¥ng d√πng ph√©p so s√°nh. <br/>
  - C√≤n ƒë∆∞·ª£c g·ªçi l√† Digital sort hay Postmans sort. <br/>
  - Radix c√≤n m·ªôt phi√™n b·∫£n Radix MSD (Most significant digit). <br/>
  - Th√≠ch h·ª£p cho vi·ªác s·∫Øp x·∫øp m·∫£ng s·ªë ho·∫∑c chu·ªói (ch·ªâ ƒë·ªëi v·ªõi m·∫£ng chu·ªói c√πng chi·ªÅu d√†i). <br/>
  - Nh∆∞·ª£c ƒëi·ªÉm: <br/>
  &nbsp;&nbsp;+ M·∫£ng c√≥ c√°c ph·∫ßn t·ª≠ qu√° ch√™nh l·ªách nhau v·ªÅ s·ªë l∆∞·ª£ng ch·ªØ s·ªë. VD: [2, 3, 21, 100000000] <br/>
  &nbsp;&nbsp;+ T·ªën kh√¥ng gian t·∫°o bucket.
</div>`,
};
